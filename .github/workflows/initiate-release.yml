name: Initiate Release

on:
  pull_request: # FIXME
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Version bump type"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
jobs:
  initiate-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        # FIXME
        # with:
        #   ref: main

      - name: Calculate new version
        id: version
        env:
          # FIXME
          # BUMP_TYPE: ${{ github.event.inputs.bump_type }}
          BUMP_TYPE: patch
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep -m 1 'version = ' Cargo.toml | cut -d '"' -f 2)

          # Ensure CURRENT_VERSION is in semantic versioning format
          if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "CRITICAL ERROR: CURRENT_VERSION '$CURRENT_VERSION' is not in semantic versioning format (MAJOR.MINOR.PATCH)."
              exit 1
          fi

          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Calculate new version based on bump type
          case "$BUMP_TYPE" in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac

          echo "New version will be: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Update version
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          cargo set-version ${NEW_VERSION}

      - name: Generate Release Notes
        id: release_notes
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_REPO: ${{ github.repository }}
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
            # Get the latest release tag
            LATEST_TAG=$(gh release list -L 1 | cut -f 3)
  
            # Generate release notes between latest tag and current branch
            NOTES=$(gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              "/repos/${GITHUB_REPO}/releases/generate-notes" \
              -f tag_name="${NEW_VERSION}" \
              -f previous_tag_name="${LATEST_TAG}" \
              | jq -r .body)
  
            if [[ "$NOTES" == "null" || -z "${NOTES// }" ]]; then
              echo "Error: Failed to generate release notes"
              echo "NOTES value: '$NOTES'"
              exit 1
            fi
  
            echo "release_notes<<DELIM" >> "$GITHUB_OUTPUT"
            echo "$NOTES" >> "$GITHUB_OUTPUT"
            echo "DELIM" >> "$GITHUB_OUTPUT"
  
      - name: Update CHANGELOG.md
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
          RELEASE_NOTES: ${{ steps.release_notes.outputs.release_notes }}
        run: |        
            # Check if version already exists in changelog
            if grep -q "## \[$NEW_VERSION\]" CHANGELOG.md; then
                echo "Version $NEW_VERSION already exists in CHANGELOG.md, skipping update"
                exit 0
            fi

            # Create a temporary file with the new changelog entry
            echo -e "\n\n" > temp_changelog.md
            echo "## [$NEW_VERSION] - $(date +%Y-%m-%d)" >> temp_changelog.md
            echo "" >> temp_changelog.md
            echo "$RELEASE_NOTES" >> temp_changelog.md
            echo "" >> temp_changelog.md
            
            # Insert the new changelog entry after the header
            awk 'NR==1{print; system("cat temp_changelog.md"); next} 1' CHANGELOG.md > new_changelog.md
            
            mv new_changelog.md CHANGELOG.md
            rm temp_changelog.md

      - name: Get branch name
        id: branch_name
        env:
          CANDIDATE_BRANCH_NAME: release-${{ steps.version.outputs.new_version }}
        run: |
          BRANCH_NAME="$CANDIDATE_BRANCH_NAME"

          # If branch already exists, append random characters
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
              RANDOM_SUFFIX=$(openssl rand -hex 4)
              BRANCH_NAME="${CANDIDATE_BRANCH_NAME}-${RANDOM_SUFFIX}"
          fi

          echo "branch_name=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: Commit and Open PR
        env:
          GITHUB_TOKEN: ${{ github.token }}
          RELEASE_NOTES: ${{ steps.release_notes.outputs.release_notes }}
          BRANCH_NAME: ${{ steps.branch_name.outputs.branch_name }}
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          git checkout -b "$BRANCH_NAME"

          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add Cargo.toml
          git add CHANGELOG.md
          git commit -m "Bump crate version to $NEW_VERSION"
          git push origin "$BRANCH_NAME"

          echo "RELEASE_NOTES: $RELEASE_NOTES"

          gh pr create \
            --title "Pontifex Release $NEW_VERSION" \
            --body "${RELEASE_NOTES}" \
            --base main \
            --label "release" \
            --head "$BRANCH_NAME"
